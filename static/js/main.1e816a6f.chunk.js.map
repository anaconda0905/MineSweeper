{"version":3,"sources":["Square.js","Engine.js","GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["Square","_contextClick","e","preventDefault","_this","props","onRightClick","x","y","_this2","this","classes","ClassNames","className","square","open","marked","bomb","bombover","react_default","a","createElement","onClick","onSquareClick","onContextMenu","numOfBombsNear","Component","getNearSquareCoordinates","size","nearSquareCoordinates","i","length","currentCoordinate","splice","Engine","numOfMines","dealOneRandomBomb","randomX","getRandomInt","randomY","flagNear","game","level","call","min","max","Math","floor","random","Object","classCallCheck","over","won","row","push","squareSelected","isGameWon","GameBoard","resetGame","boardSize","mines","setState","getGame","_handleSquareClick","updatedGame","_handleSquareRightClick","squareMarked","generateHeader","headerText","generateRows","rows","hasBomb","isOpen","isMarked","isOverBomb","src_Square","key","toString","state","header","App","_resetGame","refs","gameboard","src_GameBoard","ref","type","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e816a6f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ClassNames from \"classnames\";\r\n\r\nclass Square extends Component {\r\n\r\n    render() {\r\n        var classes = ClassNames(this.props.className, {\r\n            'square': true,\r\n            'open': this.props.open,\r\n            'marked': this.props.marked,\r\n            'bomb': this.props.bomb,\r\n            'bombover': this.props.bombover,\r\n        });\r\n\r\n        return (\r\n            <span onClick={() => this.props.onSquareClick(this.props.x, this.props.y)} onContextMenu={this._contextClick} className={classes}>\r\n                <p>\r\n                    {(this.props.open && this.props.numOfBombsNear > 0 && !this.props.bomb) ? this.props.numOfBombsNear : '\\xa0'}\r\n                </p>\r\n            </span>\r\n\r\n        );\r\n    }\r\n    _contextClick = (e) => {\r\n        e.preventDefault();\r\n        this.props.onRightClick(this.props.x, this.props.y);\r\n    }\r\n}\r\n\r\nexport default Square;\r\n","\r\nclass Engine {\r\n    constructor(size, numOfMines) {\r\n        this.game = {\r\n            over: false,\r\n            won: false,\r\n            size: size,\r\n            level: []\r\n        };\r\n\r\n        setUpLevel.call(this);\r\n        dealBombs.call(this);\r\n\r\n        function setUpLevel() {\r\n            for (var y = 0; y < size; ++y) {\r\n                var row = [];\r\n\r\n                for (var x = 0; x < size; ++x) {\r\n                    row.push({\r\n                        bomb: false,\r\n                        open: false,\r\n                        bombover: false,\r\n                        marked: false,\r\n                        numOfBombsNear: 0\r\n                    });\r\n                }\r\n\r\n                this.game.level.push(row);\r\n            }\r\n        }\r\n\r\n        function dealBombs() {\r\n            for (var i = 0; i < numOfMines; ++i) {\r\n                dealOneRandomBomb.call(this);\r\n            }\r\n        }\r\n\r\n        function dealOneRandomBomb() {\r\n            var randomX = getRandomInt(0, size);\r\n            var randomY = getRandomInt(0, size);\r\n            var flagNear = false;\r\n            var square = this.game.level[randomY][randomX];\r\n            var nearSquareCoordinates = getNearSquareCoordinates(randomX, randomY, size);\r\n\r\n            for (var i = 0; i < nearSquareCoordinates.length; ++i) {\r\n                if (this.game.level[nearSquareCoordinates[i].y][nearSquareCoordinates[i].x].numOfBombsNear > 2) {\r\n                    flagNear = true;\r\n                }\r\n            }\r\n\r\n            if (!square.bomb && square.numOfBombsNear <= 2 && !flagNear) {\r\n                square.bomb = true;\r\n                updateNearSquares.call(this, randomX, randomY);\r\n\r\n            } else {\r\n                dealOneRandomBomb.call(this);\r\n            }\r\n        }\r\n\r\n        function updateNearSquares(x, y) {\r\n            var nearSquareCoordinates = getNearSquareCoordinates(x, y, size);\r\n\r\n            for (var i = 0; i < nearSquareCoordinates.length; ++i) {\r\n                this.game.level[nearSquareCoordinates[i].y][nearSquareCoordinates[i].x].numOfBombsNear++;\r\n            }\r\n        }\r\n\r\n        function getRandomInt(min, max) {\r\n            return Math.floor(Math.random() * (max - min)) + min;\r\n        }\r\n    }\r\n    getGame() {\r\n        return this.game;\r\n    }\r\n    squareSelected(x, y) {\r\n        if (!this.game.over && !this.game.won) {\r\n            var square = this.game.level[y][x];\r\n\r\n            if (!square.open && !square.bomb && square.numOfBombsNear === 0) {\r\n                square.marked = false;\r\n                square.open = true;\r\n                var nearSquareCoordinates = getNearSquareCoordinates(x, y, this.game.size);\r\n                for (var i = 0; i < nearSquareCoordinates.length; ++i) {\r\n                    this.squareSelected(nearSquareCoordinates[i].x, nearSquareCoordinates[i].y);\r\n                }\r\n            } else {\r\n                square.marked = false;\r\n                square.open = true;\r\n            }\r\n\r\n            if (square.bomb) {\r\n                this.game.over = true;\r\n                for (y = 0; y < this.game.size; ++y) {\r\n                    for (x = 0; x < this.game.size; ++x) {\r\n                        if (this.game.level[y][x].bomb) {\r\n                            this.game.level[y][x].bombover = true;\r\n                        }\r\n                        else if (this.game.level[y][x].marked) {\r\n                            this.game.level[y][x].marked = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.game.won = this.isGameWon();\r\n            if (this.game.won) {\r\n                this.game.over = true;\r\n            }\r\n\r\n        }\r\n\r\n        return this.game;\r\n    }\r\n    squareMarked(x, y) {\r\n        if (!this.game.over && !this.game.won) {\r\n            var square = this.game.level[y][x];\r\n\r\n            if (!square.open) {\r\n                square.marked = !square.marked;\r\n            }\r\n\r\n            this.game.won = this.isGameWon();\r\n            if (this.game.won) {\r\n                this.game.over = true;\r\n            }\r\n        }\r\n\r\n        return this.game;\r\n    }\r\n    isGameWon() {\r\n        for (var y = 0; y < this.game.size; ++y) {\r\n            for (var x = 0; x < this.game.size; ++x) {\r\n                var square = this.game.level[y][x];\r\n                if (square.bomb && square.open) {\r\n                    return false;\r\n                }\r\n                if (!square.bomb && !square.open) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nfunction getNearSquareCoordinates(x, y, size) {\r\n    var nearSquareCoordinates = [\r\n        { x: x - 1, y: y },\r\n        { x: x - 1, y: y - 1 },\r\n        { x: x - 1, y: y + 1 },\r\n        { x: x + 1, y: y },\r\n        { x: x + 1, y: y - 1 },\r\n        { x: x + 1, y: y + 1 },\r\n        { x: x, y: y - 1 },\r\n        { x: x, y: y + 1 }\r\n    ];\r\n\r\n    for (var i = 0; i < nearSquareCoordinates.length; ++i) {\r\n        var currentCoordinate = nearSquareCoordinates[i];\r\n        if (currentCoordinate.x < 0 || currentCoordinate.x >= size || currentCoordinate.y < 0 || currentCoordinate.y >= size) {\r\n            nearSquareCoordinates.splice(i, 1);\r\n            --i;\r\n        }\r\n    }\r\n\r\n    return nearSquareCoordinates;\r\n}\r\n\r\nexport default Engine;","import React, { Component } from 'react';\r\nimport Square from \"./Square\";\r\nimport Engine from \"./Engine\";\r\n\r\nclass GameBoard extends Component {\r\n    componentWillMount() {\r\n        this.resetGame();\r\n    }\r\n\r\n    resetGame = () => {\r\n        this.boardSize = this.props.size;\r\n        this.numOfMines = this.props.mines;\r\n        this.Engine = new Engine(this.boardSize, this.numOfMines);\r\n        this.setState({\r\n            game: this.Engine.getGame()\r\n        });\r\n    }\r\n\r\n    _handleSquareClick = (x, y) => {\r\n\r\n        var updatedGame = this.Engine.squareSelected(x, y);\r\n        this.setState({\r\n            game: updatedGame\r\n        });\r\n    }\r\n\r\n    _handleSquareRightClick = (x, y) => {\r\n        var updatedGame = this.Engine.squareMarked(x, y);\r\n        this.setState({\r\n            game: updatedGame\r\n        });\r\n    }\r\n\r\n    render() {\r\n        var rows = this.generateRows(this.state.game.level);\r\n        var header = this.generateHeader(this.state.game);\r\n\r\n        return (\r\n            <div className=\"\">\r\n                {header}\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n    generateHeader = (game) => {\r\n        var headerText = \"\";\r\n\r\n        if (game.over) {\r\n            if (game.won) {\r\n                headerText = \"You Won!\";\r\n            } else {\r\n                headerText = \"You lost!\";\r\n            }\r\n        }\r\n\r\n        return (\r\n            <h1 className=\"header\">\r\n                {headerText}\r\n            </h1>\r\n        );\r\n    }\r\n    generateRows = (level) => {\r\n        var rows = [];\r\n\r\n        for (var y = 0; y < this.boardSize; ++y) {\r\n            var row = [];\r\n\r\n            for (var x = 0; x < this.boardSize; ++x) {\r\n                var hasBomb = level[y][x].bomb;\r\n                var isOpen = level[y][x].open;\r\n                var isMarked = level[y][x].marked;\r\n                var isOverBomb = level[y][x].bombover;\r\n                var numOfBombsNear = level[y][x].numOfBombsNear;\r\n                row.push(<Square\r\n                    onSquareClick={this._handleSquareClick}\r\n                    onRightClick={this._handleSquareRightClick}\r\n                    x={x}\r\n                    y={y}\r\n                    bomb={hasBomb}\r\n                    marked={isMarked}\r\n                    open={isOpen}\r\n                    bombover={isOverBomb}\r\n                    numOfBombsNear={numOfBombsNear}\r\n                    key={x.toString() + y.toString()} />);\r\n            }\r\n\r\n            rows.push(\r\n                <div key={y}>\r\n                    {row}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return rows;\r\n    }\r\n}\r\n\r\nexport default GameBoard;\r\n","import React, { Component } from 'react';\nimport GameBoard from \"./GameBoard\";\nimport './App.css';\n\nclass App extends Component {\n  componentWillMount() {\n    this.setState({\n      boardSize: 8,\n      numOfMines: 10\n    })\n  }\n\n  _resetGame = () => {\n    this.refs.gameboard.resetGame();\n  }\n\n  render() {\n    var boardSize = this.state.boardSize;\n    var numOfMines = this.state.numOfMines;\n\n    return (\n      <div className=\"game-area\">\n        <GameBoard ref=\"gameboard\" size={boardSize} mines={numOfMines} />\n        <form>\n          <div className=\"restart-btn\">\n            <button type=\"button\" onClick={this._resetGame}>Restart Game!</button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}